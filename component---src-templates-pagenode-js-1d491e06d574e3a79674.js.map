{"version":3,"sources":["webpack:///./src/templates/pagenode.js","webpack:///./src/components/seo.js"],"names":["StyledImg","Object","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","Img","target","name","styles","PageTemplate","_ref","title","content","data","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","className","dangerouslySetInnerHTML","__html","acf","about_image","localFile","key","fluid","childImageSharp","questions","scholarship_hero_title","scholarship_hero_subtitle","scholarship_title","about_title","about_content","faq_title","faq_content","content_bottom","propTypes","PropTypes","string","isRequired","object","Page","_ref2","page","wordpressPage","pageData","yoast","yoast_meta","_components_Layout__WEBPACK_IMPORTED_MODULE_5__","_components_seo__WEBPACK_IMPORTED_MODULE_6__","yoast_wpseo_title","description","yoast_wpseo_metadesc","pageQuery","SEO","lang","meta","keywords","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","siteMetadata","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","a","htmlAttributes","titleTemplate","property","author","concat","length","join","defaultProps","arrayOf"],"mappings":"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","file":"component---src-templates-pagenode-js-1d491e06d574e3a79674.js","sourcesContent":["import React, { Fragment } from 'react'\nimport styled from '@emotion/styled'\nimport Img from 'gatsby-image'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\n\nconst StyledImg = styled(Img)`\n  width: 100%;\n  height: 600px;\n  @media (min-width: 600px) {\n    width: 600px;\n  }\n`\n\nexport const PageTemplate = ({ title, content, data }) => {\n  return (\n    <Fragment>\n      <h2 className=\"title is-size-3 has-text-weight-bold is-bold-light\">\n        {title}\n      </h2>\n      <div className=\"content\" dangerouslySetInnerHTML={{ __html: content }} />\n\n      {data.acf && (\n        <div>\n          {data.acf.content && (\n            <div dangerouslySetInnerHTML={{ __html: data.acf.content }} />\n          )}\n\n          {data.acf.about_image && data.acf.about_image.localFile && (\n            <StyledImg\n              key={data.acf.title}\n              fluid={data.acf.about_image.localFile.childImageSharp.fluid}\n            />\n          )}\n          <div dangerouslySetInnerHTML={{ __html: data.acf.title }} />\n          <div dangerouslySetInnerHTML={{ __html: data.acf.questions }} />\n          <div\n            dangerouslySetInnerHTML={{\n              __html: data.acf.scholarship_hero_title,\n            }}\n          />\n          <div\n            dangerouslySetInnerHTML={{\n              __html: data.acf.scholarship_hero_subtitle,\n            }}\n          />\n          <div\n            dangerouslySetInnerHTML={{ __html: data.acf.scholarship_title }}\n          />\n          <div dangerouslySetInnerHTML={{ __html: data.acf.about_title }} />\n          <div dangerouslySetInnerHTML={{ __html: data.acf.about_content }} />\n          <div dangerouslySetInnerHTML={{ __html: data.acf.faq_title }} />\n          <div dangerouslySetInnerHTML={{ __html: data.acf.faq_content }} />\n          <div dangerouslySetInnerHTML={{ __html: data.acf.content_bottom }} />\n        </div>\n      )}\n    </Fragment>\n  )\n}\n\nPageTemplate.propTypes = {\n  title: PropTypes.string.isRequired,\n  content: PropTypes.string,\n  data: PropTypes.object.isRequired,\n}\n\nconst Page = ({ data }) => {\n  const { wordpressPage: page } = data\n  const { wordpressPage: pageData } = data\n\n  const yoast = page.yoast_meta\n\n  return (\n    <Layout>\n      <SEO\n        title={yoast.yoast_wpseo_title}\n        description={yoast.yoast_wpseo_metadesc}\n      />\n      <PageTemplate title={page.title} content={page.content} data={pageData} />\n    </Layout>\n  )\n}\n\nPage.propTypes = {\n  data: PropTypes.object.isRequired,\n}\n\nexport default Page\n\nexport const pageQuery = graphql`\n  query PageById($id: String!) {\n    wordpressPage(id: { eq: $id }) {\n      title\n      content\n      yoast_meta {\n        yoast_wpseo_title\n        yoast_wpseo_metadesc\n        yoast_wpseo_canonical\n        yoast_wpseo_facebook_title\n        yoast_wpseo_facebook_description\n        yoast_wpseo_facebook_type\n        yoast_wpseo_facebook_image\n        yoast_wpseo_twitter_title\n        yoast_wpseo_twitter_description\n        yoast_wpseo_twitter_image\n        yoast_wpseo_social_url\n        yoast_wpseo_company_or_person\n        yoast_wpseo_person_name\n        yoast_wpseo_company_name\n        yoast_wpseo_company_logo\n        yoast_wpseo_website_name\n      }\n      acf {\n        test_comments_field\n        tags\n        content\n        title\n        questions\n        scholarship_hero_title\n        scholarship_hero_subtitle\n        scholarship_title\n        scholarship_section\n        scholarship_status\n        closing_date\n        scholarship_application_email\n        scholarship_application_button\n        scholaraship_prizes\n        header_text\n        category\n        about_title\n        about_content\n        faq_title\n        faq_content\n        content_bottom\n        about_image {\n          localFile {\n            childImageSharp {\n              fluid(maxWidth: 500) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}